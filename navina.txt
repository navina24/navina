# Importing necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix
import seaborn as sns

# Load traffic accident dataset
# Assuming a CSV dataset with columns like 'time_of_day', 'weather_condition', 'traffic_density', 'road_condition', 'accident'
data = pd.read_csv('traffic_accidents.csv')

# Display first few rows of the dataset
print(data.head())

# Data Preprocessing
# Handling missing values
data.fillna(data.mean(), inplace=True)  # For numerical columns
data.fillna(data.mode().iloc[0], inplace=True)  # For categorical columns

# Encoding categorical variables
data = pd.get_dummies(data, drop_first=True)

# Feature engineering - Extract features like 'day_of_week' from 'time_of_day'
data['day_of_week'] = pd.to_datetime(data['time_of_day']).dt.dayofweek

# Select features and target variable
X = data.drop(columns=['accident', 'time_of_day'])  # Drop target and any unnecessary columns
y = data['accident']

# Split dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Standardizing the features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Model Training - Random Forest Classifier
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Predictions on test data
y_pred = model.predict(X_test)

# Evaluation
print("Confusion Matrix:")
conf_matrix = confusion_matrix(y_test, y_pred)
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=['No Accident', 'Accident'], yticklabels=['No Accident', 'Accident'])
plt.title('Confusion Matrix')
plt.show()

print("\nClassification Report:")
print(classification_report(y_test, y_pred))

# Feature Importance
features = X.columns
importances = model.feature_importances_

# Plot feature importances
plt.figure(figsize=(10, 6))
sns.barplot(x=importances, y=features)
plt.title('Feature Importances')
plt.xlabel('Importance')
plt.ylabel('Feature')
plt.show()

# Predicting accident likelihood for a given scenario
new_data = np.array([ [3, 1, 0, 75, 1] ])  # Example input: [day_of_week=3, weather_sunny=1, road_condition_good=0, traffic_density=75, rush_hour=1]
new_data_scaled = scaler.transform(new_data)
predicted_accident = model.predict(new_data_scaled)

if predicted_accident[0] == 1:
    print("High likelihood of an accident.")
else:
    print("Low likelihood of an accident.")